/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void slider(GCustomSlider source, GEvent event) { //_CODE_:cardEvents:799781:
  cardsToBeSorted = cardEvents.getValueI();
  clearCards();
} //_CODE_:cardEvents:799781:

public void restartButton(GButton source, GEvent event) { //_CODE_:restartEvent:580862:
  clearCards();
} //_CODE_:restartEvent:580862:

public void dropList(GDropList source, GEvent event) { //_CODE_:listEvents:686679:
  sortingAlgorithm = listEvents.getSelectedText();
  clearCards();
} //_CODE_:listEvents:686679:

public void dropList2(GDropList source, GEvent event) { //_CODE_:animationType:301632:
  animation = animationType.getSelectedText();
  clearCards();
} //_CODE_:animationType:301632:

public void speedSlider(GCustomSlider source, GEvent event) { //_CODE_:speedEvents:567225:
  speed = abs(speedEvents.getValueI() - 6);
  for (int i = 0; i < cardsToBeSwapped.size(); i++) {
    cardsToBeSwapped.get(i).drawAgain();
  }
} //_CODE_:speedEvents:567225:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  cardEvents = new GCustomSlider(this, 30, 14, 100, 40, "grey_blue");
  cardEvents.setShowValue(true);
  cardEvents.setLimits(16, 2, 16);
  cardEvents.setNbrTicks(52);
  cardEvents.setStickToTicks(true);
  cardEvents.setShowTicks(true);
  cardEvents.setNumberFormat(G4P.INTEGER, 0);
  cardEvents.setOpaque(false);
  cardEvents.addEventHandler(this, "slider");
  restartEvent = new GButton(this, 100, 110, 80, 30);
  restartEvent.setText("Restart");
  restartEvent.addEventHandler(this, "restartButton");
  listEvents = new GDropList(this, 36, 63, 90, 120, 5, 10);
  listEvents.setItems(loadStrings("list_686679"), 0);
  listEvents.addEventHandler(this, "dropList");
  animationType = new GDropList(this, 170, 63, 90, 60, 2, 10);
  animationType.setItems(loadStrings("list_301632"), 0);
  animationType.addEventHandler(this, "dropList2");
  speedEvents = new GCustomSlider(this, 164, 14, 100, 40, "grey_blue");
  speedEvents.setShowValue(true);
  speedEvents.setLimits(3, 1, 5);
  speedEvents.setNbrTicks(5);
  speedEvents.setStickToTicks(true);
  speedEvents.setShowTicks(true);
  speedEvents.setNumberFormat(G4P.INTEGER, 0);
  speedEvents.setOpaque(false);
  speedEvents.addEventHandler(this, "speedSlider");
}

// Variable declarations 
// autogenerated do not edit
GCustomSlider cardEvents; 
GButton restartEvent; 
GDropList listEvents; 
GDropList animationType; 
GCustomSlider speedEvents; 
